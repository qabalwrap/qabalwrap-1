// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: diagnosis-idl.proto

package qbw1diagrpcgen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_idl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_idl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_idl_proto_rawDescGZIP(), []int{0}
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ProcessIdent int32 `protobuf:"varint,2,opt,name=process_ident,json=processIdent,proto3" json:"process_ident,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_idl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_idl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_diagnosis_idl_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingReply) GetProcessIdent() int32 {
	if x != nil {
		return x.ProcessIdent
	}
	return 0
}

type ReadTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInstanceIdent string `protobuf:"bytes,1,opt,name=client_instance_ident,json=clientInstanceIdent,proto3" json:"client_instance_ident,omitempty"`
}

func (x *ReadTraceRequest) Reset() {
	*x = ReadTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_idl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTraceRequest) ProtoMessage() {}

func (x *ReadTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_idl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTraceRequest.ProtoReflect.Descriptor instead.
func (*ReadTraceRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_idl_proto_rawDescGZIP(), []int{2}
}

func (x *ReadTraceRequest) GetClientInstanceIdent() string {
	if x != nil {
		return x.ClientInstanceIdent
	}
	return ""
}

type SpanIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceIdent int32 `protobuf:"varint,1,opt,name=trace_ident,json=traceIdent,proto3" json:"trace_ident,omitempty"`
	SpanIdent  int32 `protobuf:"varint,2,opt,name=span_ident,json=spanIdent,proto3" json:"span_ident,omitempty"`
}

func (x *SpanIdent) Reset() {
	*x = SpanIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_idl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanIdent) ProtoMessage() {}

func (x *SpanIdent) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_idl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanIdent.ProtoReflect.Descriptor instead.
func (*SpanIdent) Descriptor() ([]byte, []int) {
	return file_diagnosis_idl_proto_rawDescGZIP(), []int{3}
}

func (x *SpanIdent) GetTraceIdent() int32 {
	if x != nil {
		return x.TraceIdent
	}
	return 0
}

func (x *SpanIdent) GetSpanIdent() int32 {
	if x != nil {
		return x.SpanIdent
	}
	return 0
}

type TraceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceIdent      int32        `protobuf:"varint,1,opt,name=trace_ident,json=traceIdent,proto3" json:"trace_ident,omitempty"`
	SpanIdent       int32        `protobuf:"varint,2,opt,name=span_ident,json=spanIdent,proto3" json:"span_ident,omitempty"`
	ParentSpanIdent int32        `protobuf:"varint,3,opt,name=parent_span_ident,json=parentSpanIdent,proto3" json:"parent_span_ident,omitempty"`
	TraceType       int32        `protobuf:"varint,4,opt,name=trace_type,json=traceType,proto3" json:"trace_type,omitempty"`
	EmitAt          int64        `protobuf:"varint,5,opt,name=emit_at,json=emitAt,proto3" json:"emit_at,omitempty"`
	MessageText     string       `protobuf:"bytes,6,opt,name=message_text,json=messageText,proto3" json:"message_text,omitempty"`
	LinkedSpans     []*SpanIdent `protobuf:"bytes,7,rep,name=linked_spans,json=linkedSpans,proto3" json:"linked_spans,omitempty"`
	ServiceName     string       `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	OperationName   string       `protobuf:"bytes,9,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	IsSuccess       bool         `protobuf:"varint,10,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *TraceRecord) Reset() {
	*x = TraceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_idl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRecord) ProtoMessage() {}

func (x *TraceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_idl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRecord.ProtoReflect.Descriptor instead.
func (*TraceRecord) Descriptor() ([]byte, []int) {
	return file_diagnosis_idl_proto_rawDescGZIP(), []int{4}
}

func (x *TraceRecord) GetTraceIdent() int32 {
	if x != nil {
		return x.TraceIdent
	}
	return 0
}

func (x *TraceRecord) GetSpanIdent() int32 {
	if x != nil {
		return x.SpanIdent
	}
	return 0
}

func (x *TraceRecord) GetParentSpanIdent() int32 {
	if x != nil {
		return x.ParentSpanIdent
	}
	return 0
}

func (x *TraceRecord) GetTraceType() int32 {
	if x != nil {
		return x.TraceType
	}
	return 0
}

func (x *TraceRecord) GetEmitAt() int64 {
	if x != nil {
		return x.EmitAt
	}
	return 0
}

func (x *TraceRecord) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *TraceRecord) GetLinkedSpans() []*SpanIdent {
	if x != nil {
		return x.LinkedSpans
	}
	return nil
}

func (x *TraceRecord) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TraceRecord) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *TraceRecord) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

var File_diagnosis_idl_proto protoreflect.FileDescriptor

var file_diagnosis_idl_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x69, 0x64, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x71, 0x61, 0x62, 0x61, 0x6c, 0x77, 0x72, 0x61, 0x70,
	0x31, 0x64, 0x69, 0x61, 0x67, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x09,
	0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x22, 0xfb, 0x02, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6d, 0x69, 0x74, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x61, 0x62, 0x61, 0x6c, 0x77, 0x72,
	0x61, 0x70, 0x31, 0x64, 0x69, 0x61, 0x67, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xa7, 0x01, 0x0a, 0x17, 0x51, 0x61, 0x62, 0x61,
	0x6c, 0x77, 0x72, 0x61, 0x70, 0x31, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x47,
	0x52, 0x50, 0x43, 0x12, 0x3e, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x71, 0x61,
	0x62, 0x61, 0x6c, 0x77, 0x72, 0x61, 0x70, 0x31, 0x64, 0x69, 0x61, 0x67, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x71, 0x61, 0x62, 0x61, 0x6c,
	0x77, 0x72, 0x61, 0x70, 0x31, 0x64, 0x69, 0x61, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x20, 0x2e, 0x71, 0x61, 0x62, 0x61, 0x6c, 0x77, 0x72, 0x61, 0x70, 0x31, 0x64, 0x69, 0x61,
	0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x71, 0x61, 0x62, 0x61, 0x6c, 0x77, 0x72, 0x61, 0x70, 0x31, 0x64,
	0x69, 0x61, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x30,
	0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x71, 0x61, 0x62, 0x61, 0x6c, 0x77, 0x72, 0x61, 0x70, 0x2f, 0x71, 0x61, 0x62, 0x61, 0x6c, 0x77,
	0x72, 0x61, 0x70, 0x2d, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x71, 0x62, 0x77, 0x31, 0x64, 0x69,
	0x61, 0x67, 0x72, 0x70, 0x63, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnosis_idl_proto_rawDescOnce sync.Once
	file_diagnosis_idl_proto_rawDescData = file_diagnosis_idl_proto_rawDesc
)

func file_diagnosis_idl_proto_rawDescGZIP() []byte {
	file_diagnosis_idl_proto_rawDescOnce.Do(func() {
		file_diagnosis_idl_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnosis_idl_proto_rawDescData)
	})
	return file_diagnosis_idl_proto_rawDescData
}

var file_diagnosis_idl_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_diagnosis_idl_proto_goTypes = []interface{}{
	(*PingRequest)(nil),      // 0: qabalwrap1diag.PingRequest
	(*PingReply)(nil),        // 1: qabalwrap1diag.PingReply
	(*ReadTraceRequest)(nil), // 2: qabalwrap1diag.ReadTraceRequest
	(*SpanIdent)(nil),        // 3: qabalwrap1diag.SpanIdent
	(*TraceRecord)(nil),      // 4: qabalwrap1diag.TraceRecord
}
var file_diagnosis_idl_proto_depIdxs = []int32{
	3, // 0: qabalwrap1diag.TraceRecord.linked_spans:type_name -> qabalwrap1diag.SpanIdent
	0, // 1: qabalwrap1diag.Qabalwrap1DiagnosisGRPC.Ping:input_type -> qabalwrap1diag.PingRequest
	2, // 2: qabalwrap1diag.Qabalwrap1DiagnosisGRPC.ReadTrace:input_type -> qabalwrap1diag.ReadTraceRequest
	1, // 3: qabalwrap1diag.Qabalwrap1DiagnosisGRPC.Ping:output_type -> qabalwrap1diag.PingReply
	4, // 4: qabalwrap1diag.Qabalwrap1DiagnosisGRPC.ReadTrace:output_type -> qabalwrap1diag.TraceRecord
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_diagnosis_idl_proto_init() }
func file_diagnosis_idl_proto_init() {
	if File_diagnosis_idl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diagnosis_idl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_idl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_idl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_idl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_idl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnosis_idl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diagnosis_idl_proto_goTypes,
		DependencyIndexes: file_diagnosis_idl_proto_depIdxs,
		MessageInfos:      file_diagnosis_idl_proto_msgTypes,
	}.Build()
	File_diagnosis_idl_proto = out.File
	file_diagnosis_idl_proto_rawDesc = nil
	file_diagnosis_idl_proto_goTypes = nil
	file_diagnosis_idl_proto_depIdxs = nil
}
