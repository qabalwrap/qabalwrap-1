// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package qbw1diagrpcgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Qabalwrap1DiagnosisGRPCClient is the client API for Qabalwrap1DiagnosisGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Qabalwrap1DiagnosisGRPCClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	ReadTrace(ctx context.Context, in *ReadTraceRequest, opts ...grpc.CallOption) (Qabalwrap1DiagnosisGRPC_ReadTraceClient, error)
}

type qabalwrap1DiagnosisGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewQabalwrap1DiagnosisGRPCClient(cc grpc.ClientConnInterface) Qabalwrap1DiagnosisGRPCClient {
	return &qabalwrap1DiagnosisGRPCClient{cc}
}

func (c *qabalwrap1DiagnosisGRPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/qabalwrap1diag.Qabalwrap1DiagnosisGRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qabalwrap1DiagnosisGRPCClient) ReadTrace(ctx context.Context, in *ReadTraceRequest, opts ...grpc.CallOption) (Qabalwrap1DiagnosisGRPC_ReadTraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Qabalwrap1DiagnosisGRPC_ServiceDesc.Streams[0], "/qabalwrap1diag.Qabalwrap1DiagnosisGRPC/ReadTrace", opts...)
	if err != nil {
		return nil, err
	}
	x := &qabalwrap1DiagnosisGRPCReadTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Qabalwrap1DiagnosisGRPC_ReadTraceClient interface {
	Recv() (*TraceRecord, error)
	grpc.ClientStream
}

type qabalwrap1DiagnosisGRPCReadTraceClient struct {
	grpc.ClientStream
}

func (x *qabalwrap1DiagnosisGRPCReadTraceClient) Recv() (*TraceRecord, error) {
	m := new(TraceRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Qabalwrap1DiagnosisGRPCServer is the server API for Qabalwrap1DiagnosisGRPC service.
// All implementations must embed UnimplementedQabalwrap1DiagnosisGRPCServer
// for forward compatibility
type Qabalwrap1DiagnosisGRPCServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	ReadTrace(*ReadTraceRequest, Qabalwrap1DiagnosisGRPC_ReadTraceServer) error
	mustEmbedUnimplementedQabalwrap1DiagnosisGRPCServer()
}

// UnimplementedQabalwrap1DiagnosisGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedQabalwrap1DiagnosisGRPCServer struct {
}

func (UnimplementedQabalwrap1DiagnosisGRPCServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedQabalwrap1DiagnosisGRPCServer) ReadTrace(*ReadTraceRequest, Qabalwrap1DiagnosisGRPC_ReadTraceServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTrace not implemented")
}
func (UnimplementedQabalwrap1DiagnosisGRPCServer) mustEmbedUnimplementedQabalwrap1DiagnosisGRPCServer() {
}

// UnsafeQabalwrap1DiagnosisGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Qabalwrap1DiagnosisGRPCServer will
// result in compilation errors.
type UnsafeQabalwrap1DiagnosisGRPCServer interface {
	mustEmbedUnimplementedQabalwrap1DiagnosisGRPCServer()
}

func RegisterQabalwrap1DiagnosisGRPCServer(s grpc.ServiceRegistrar, srv Qabalwrap1DiagnosisGRPCServer) {
	s.RegisterService(&Qabalwrap1DiagnosisGRPC_ServiceDesc, srv)
}

func _Qabalwrap1DiagnosisGRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Qabalwrap1DiagnosisGRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qabalwrap1diag.Qabalwrap1DiagnosisGRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Qabalwrap1DiagnosisGRPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qabalwrap1DiagnosisGRPC_ReadTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadTraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Qabalwrap1DiagnosisGRPCServer).ReadTrace(m, &qabalwrap1DiagnosisGRPCReadTraceServer{stream})
}

type Qabalwrap1DiagnosisGRPC_ReadTraceServer interface {
	Send(*TraceRecord) error
	grpc.ServerStream
}

type qabalwrap1DiagnosisGRPCReadTraceServer struct {
	grpc.ServerStream
}

func (x *qabalwrap1DiagnosisGRPCReadTraceServer) Send(m *TraceRecord) error {
	return x.ServerStream.SendMsg(m)
}

// Qabalwrap1DiagnosisGRPC_ServiceDesc is the grpc.ServiceDesc for Qabalwrap1DiagnosisGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qabalwrap1DiagnosisGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qabalwrap1diag.Qabalwrap1DiagnosisGRPC",
	HandlerType: (*Qabalwrap1DiagnosisGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Qabalwrap1DiagnosisGRPC_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadTrace",
			Handler:       _Qabalwrap1DiagnosisGRPC_ReadTrace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diagnosis-idl.proto",
}
